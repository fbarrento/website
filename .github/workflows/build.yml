name: build

on:
  workflow_run:
    workflows: ["tests"]
    branches:
      - main
    types:
      - completed

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    environment: stage
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check linter workflow status
        uses: actions/github-script@v6
        id: check-linter
        with:
          script: |
            const linterRuns = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'lint.yml',
              branch: 'main',
              status: 'completed',
              per_page: 1
            });

            if (linterRuns.data.workflow_runs.length === 0) {
              core.setFailed('No completed linter workflow runs found');
              return;
            }

            const latestLinterRun = linterRuns.data.workflow_runs[0];
            console.log(`Latest linter run: ${latestLinterRun.conclusion}`);

            if (latestLinterRun.conclusion !== 'success') {
              core.setFailed('Latest linter workflow did not succeed');
              return;
            }

            core.setOutput('linter_success', 'true');
      - name: Checkout
        if: steps.check-linter.outputs.linter_success == 'true'
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: steps.check-linter.outputs.linter_success == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.check-linter.outputs.linter_success == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        if: steps.check-linter.outputs.linter_success == 'true'
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the image with the SHA tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/php/Dockerfile .
          # Tag the same image with latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Push both images to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
